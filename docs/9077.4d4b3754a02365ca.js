"use strict";(self.webpackChunkgit_glint=self.webpackChunkgit_glint||[]).push([[9077],{88784:(P,B,o)=>{o.d(B,{r:()=>w});var r=o(83668);let w=(()=>{class v{transform(f,p,n=f+"s"){return 1===p?f:n}}return v.\u0275fac=function(f){return new(f||v)},v.\u0275pipe=r.Yjl({name:"plural",type:v,pure:!0}),v})()},95332:(P,B,o)=>{o.d(B,{T:()=>x});var r=o(21934),w=o(83668),v=o(84504);let x=(()=>{class f{constructor(n){this.baseApi=n}getCommit(n,u){return this.baseApi.single(r.w.commits.getCommit,n,u)}putCommit(n,u,I,g){return this.baseApi.single(r.w.commits.putCommit,n,u,I,g)}revertCommit(n,u,I,g){return this.baseApi.single(r.w.commits.revertCommit,n,u,I,g)}undoHeadCommit(n){return this.baseApi.single(r.w.commits.undoHeadCommit,n)}getBranchCommitId(n,u){return this.baseApi.single(r.w.commits.getBranchCommitId,n,u)}getBranchUpstreamCommitId(n,u){return this.baseApi.single(r.w.commits.getBranchUpstreamCommitId,n,u)}getOngoingEdit(n){return this.baseApi.single(r.w.commits.getOngoingEdit,n)}startCommitEditing(n,u){return this.baseApi.single(r.w.commits.startCommitEditing,n,u)}discardCommitEditing(n){return this.baseApi.single(r.w.commits.discardCommitEditing,n)}completeCommitEditing(n){return this.baseApi.single(r.w.commits.completeCommitEditing,n)}editCommitDetails(n,u,I){return this.baseApi.single(r.w.commits.editCommitDetails,n,u,I)}squashCommit(n,u,I,g=null){return this.baseApi.single(r.w.commits.squashCommit,n,u,I,g)}moveCommitChanges(n,u,I,g,R=null){return this.baseApi.single(r.w.commits.moveCommitChanges,n,u,I,g,R)}insertCommit(n,u,I,g=null){return this.baseApi.single(r.w.commits.insertCommit,n,u,I,g)}}return f.\u0275fac=function(n){return new(n||f)(w.LFG(v._))},f.\u0275prov=w.Yz7({token:f,factory:f.\u0275fac,providedIn:"root"}),f})()},76769:(P,B,o)=>{o.d(B,{c:()=>v});var r=o(1869),w=o(83668);let v=(()=>{class x{}return x.\u0275fac=function(p){return new(p||x)},x.\u0275mod=w.oAB({type:x}),x.\u0275inj=w.cJS({imports:[[r.I]]}),x})()},72352:(P,B,o)=>{o.d(B,{d:()=>x});var r=o(73967),w=o(76769),v=o(83668);let x=(()=>{class f{getPatchPath(n){switch(n.status){case r.v.Added:case r.v.Untracked:return n.newFilePath;case r.v.Conflicted:case r.v.Modified:case r.v.Renamed:return n.oldFilePath===n.newFilePath?n.newFilePath:`${n.oldFilePath} --\x3e ${n.newFilePath}`;case r.v.Deleted:return n.oldFilePath;default:throw new Error(`Don't know how to deal with patch status: ${r.v[n.status]}`)}}getPatchIcon(n){switch(n.status){case r.v.Added:case r.v.Untracked:return"add";case r.v.Conflicted:return"warning";case r.v.Modified:return"create";case r.v.Deleted:return"remove";case r.v.Renamed:return"swap_horiz";default:throw new Error(`Don't know how to deal with patch status: ${r.v[n.status]}`)}}getPatchIconColorClass(n){switch(n.status){case r.v.Added:case r.v.Untracked:return"green";case r.v.Conflicted:case r.v.Modified:return"orange";case r.v.Deleted:return"red";case r.v.Renamed:return"blue";default:throw new Error(`Don't know how to deal with patch status: ${r.v[n.status]}`)}}}return f.\u0275fac=function(n){return new(n||f)},f.\u0275prov=v.Yz7({token:f,factory:f.\u0275fac,providedIn:w.c}),f})()},16702:(P,B,o)=>{o.d(B,{p:()=>v});var r=o(93489),w=o(83668);let v=(()=>{class x{constructor(){this.parseReference=p=>{const n=x.referenceRegex.exec(p);if(!n)throw new Error(`Reference invalid: ${p}`);if("remotes"===n[1]){const u=x.remoteBranchRegex.exec(p);if(!u)throw new Error(`Remote reference invalid: ${p}`);return{branch:u[2],sourceName:u[1],sourceType:"remote"}}return"stash"===n[1]?{branch:"stash",sourceName:"stash",sourceType:"stash"}:{branch:n[2],sourceName:"heads"===n[1]?"local":"tag",sourceType:"heads"===n[1]?"local":"tag"}},this.getBranchTypeIcon=p=>{switch(p){case"local":return"desktop_windows";case"remote":return"cloud_queue";case"stash":return"edit";case"tag":return"label";default:throw new Error(`Unknown reference type: ${p}`)}}}calculateBranches(p,n){const u=(0,r.Z)(p.map(this.parseReference),({branch:I})=>I);return Object.entries(u).map(([I,g])=>({name:I,sources:g.map(R=>({name:R.sourceName,type:R.sourceType,icon:this.getBranchTypeIcon(R.sourceType)}))})).sort((I,g)=>{const R=I.sources.some(y=>"local"===y.type&&`refs/heads/${I.name}`===n),b=I.sources.some(y=>"local"===y.type&&`refs/heads/${g.name}`===n);if(R&&!b)return-1;if(!R&&b)return 1;const j=I.sources.some(y=>"local"===y.type),S=g.sources.some(y=>"local"===y.type);if(j&&!S)return-1;if(!j&&S)return 1;const E=I.sources.some(y=>"remote"===y.type),O=g.sources.some(y=>"remote"===y.type);return E&&!O?-1:!E&&O?1:I.sources.length>g.sources.length?-1:I.sources.length<g.sources.length?1:I.name>g.name?-1:I.name<g.name?1:0})}}return x.referenceRegex=/refs\/(heads|remotes|tags|stash)(?:\/(.*))?/,x.remoteBranchRegex=/refs\/remotes\/([^\/]*)\/(.*)/,x.\u0275fac=function(p){return new(p||x)},x.\u0275prov=w.Yz7({token:x,factory:x.\u0275fac,providedIn:"root"}),x})()},13358:(P,B,o)=>{o.d(B,{$:()=>W});var r=o(67115),w=o(90441);const x=function(A,t){return A<t},p=function(A,t){return A&&A.length?(0,r.Z)(A,(0,w.Z)(t,2),x):void 0};var n=o(31397);var g=o(34537),R=o(83298),b=o(46540),j=o(54928),S=o(93490),E=o(10381);var F=o(64305),K=o(16410);const N=(0,F.Z)(function(A,t){return(0,K.Z)(A)?function(A,t,c,m){var a=-1,e=R.Z,d=!0,s=A.length,h=[],T=t.length;if(!s)return h;c&&(t=(0,j.Z)(t,(0,S.Z)(c))),m?(e=b.Z,d=!1):t.length>=200&&(e=E.Z,d=!1,t=new g.Z(t));e:for(;++a<s;){var C=A[a],_=null==c?C:c(C);if(C=m||0!==C?C:0,d&&_==_){for(var l=T;l--;)if(t[l]===_)continue e;h.push(C)}else e(t,_,m)||h.push(C)}return h}(A,t):[]});var z=o(48823),G=o(83668);class W{isIndexInBounds(t,c,m){const a=t*W.yUnit;return a>=c&&a<m-W.yUnit}calculateVisible(t,c,m,a,e){return{commitDetails:t.slice(a,e),commitTrails:c.filter(d=>d.minYIndexWithMerges<=e&&d.maxYIndexWithMerges>=a),mergePaths:m.filter(d=>d.from.yIndex>=a&&d.to.some(s=>s.yIndex<=e))}}calculate(t,c,m,a,e,d){const s={};let h=[],T=[],C=[];const _=(t?1:0)+c.length;m.forEach((i,Y)=>{s[i.id]={id:i.id,yIndex:Y+_,commit:i}});const l=[];c.forEach((i,Y)=>{const M=`merge:${i.fromCommitId}:${i.toCommitId}`,D={id:M,message:i.message??`merge: from '${i.fromCommitId}' into '${i.toCommitId}'`,parentIds:[i.toCommitId,i.fromCommitId],time:0,references:[],authorEmail:"",authorName:""};l.push(D),s[M]={id:M,yIndex:Y+(t?1:0),commit:D}});const $=t?{id:"head",message:"",parentIds:t.parentId?[t.parentId,...t.mergeHeads]:[...t.mergeHeads],time:0,references:[],authorEmail:"",authorName:""}:null;t&&(s.head={id:"head",yIndex:0,commit:$});const L=$?[$,...l,...m]:[...l,...m];if(L.forEach(i=>{const Y=s[i.id];Y.trail||this.calculateTrail(Y,s,h,T),i.parentIds.length>1&&i.parentIds.slice(1).forEach(M=>{const D=s[M];if(D)if(D.mergeFrom)D.mergeFrom.to.push(Y);else{const Z={from:D,to:[Y],isDashed:"head"===i.id||i.id.startsWith("merge:")};D.mergeFrom=Z,C.push(Z)}})}),({mergePaths:C,lanes:T}=this.calculateMergePaths(C,T,a,e)),this.calculateColors(h,d),t&&t.parentId&&s[t.parentId]){const i=h.find(Y=>0===Y.minYIndex);if(i){i.commits=i.commits.filter(M=>"head"!==M.id);const Y=p(i.commits,M=>M.yIndex);i.minYIndex=Y?.yIndex??0,i.minYIndexWithMerges=Y?.yIndex??0,this.createUncommittedTrail(s.head,s[t.parentId],h,i.colorIndex,i.lane)}}return l.forEach((i,Y)=>{const M=h.find(D=>D.minYIndex===Y+(t?1:0));if(M&&s[i.parentIds[0]]){if(M.commits=M.commits.filter(D=>D.id!==i.id),M.commits.length<=0)h=h.filter(D=>D!==M);else{const D=p(M.commits.filter(Z=>"head"!==Z.id&&!Z.id.startsWith("merge:")),Z=>Z.yIndex);M.minYIndex=D?.yIndex??0,M.minYIndexWithMerges=D?.yIndex??0}this.createUncommittedTrail(s[i.id],s[i.parentIds[0]],h,M.colorIndex,M.lane)}}),{commitDetails:s,commitTrails:h,lanes:T,mergePaths:C,headCommit:$,orderedCommits:L}}createUncommittedTrail(t,c,m,a,e){let d=c.yIndex;c.mergeFrom&&c.mergeFrom.to.length>0&&!c.mergeFrom.isDashed&&(d=Math.min(...c.mergeFrom.to.map(h=>h.yIndex))+.25,m.push({trailIndex:m.length,minYIndex:d,maxYIndex:c.yIndex,minYIndexWithMerges:d,maxYIndexWithMerges:c.yIndex,colorIndex:a,commits:[],isDashed:!1,lane:e}));const s={trailIndex:m.length,minYIndex:t.yIndex,maxYIndex:d,minYIndexWithMerges:t.yIndex,maxYIndexWithMerges:d,colorIndex:a,commits:[t],isDashed:!0,lane:e};return t.trail=s,m.push(s),s}calculateTrail(t,c,m,a){const e={trailIndex:m.length,minYIndex:t.yIndex,maxYIndex:t.yIndex,minYIndexWithMerges:t.yIndex,maxYIndexWithMerges:t.yIndex,colorIndex:null,commits:[],isDashed:!1};if(t.commit.parentIds.length<=0)t.trail=e,e.commits.push(t),e.maxYIndex=t.yIndex,e.maxYIndexWithMerges=t.yIndex;else{let s=t;for(;s&&!s.trail&&s.commit.parentIds.length>0;)s.trail=e,e.maxYIndex=s.yIndex,e.maxYIndexWithMerges=s.yIndex,e.commits.push(s),s=c[s.commit.parentIds[0]];s&&(e.maxYIndex=s.yIndex,e.maxYIndexWithMerges=s.yIndex,s.trail||(s.trail=e,e.commits.push(s)))}let d=a.find(s=>this.getLaneMaxYIndex(s)<e.minYIndex);return d||(d={xIndex:a.length,occupations:[]},a.push(d)),d.occupations.push({type:"commit-trail",minYIndex:e.minYIndex,maxYIndex:e.maxYIndex}),e.lane=d,m.push(e),e}calculateMergePaths(t,c,m,a){return c=c.map(e=>({...e,occupations:e.occupations.filter(d=>"merge-path"!==d.type)})).filter(e=>e.occupations.length>0),t.forEach(e=>{const d=[];let s;e.to.forEach(l=>{e.from.trail.minYIndexWithMerges>l.yIndex&&(e.from.trail.minYIndexWithMerges=l.yIndex),e.from.trail.maxYIndexWithMerges<l.yIndex&&(e.from.trail.maxYIndexWithMerges=l.yIndex),l.trail.minYIndexWithMerges>e.from.yIndex&&(l.trail.minYIndexWithMerges=e.from.yIndex),l.trail.maxYIndexWithMerges<e.from.yIndex&&(l.trail.maxYIndexWithMerges=e.from.yIndex)});const h=e.from.trail.lane.xIndex,T=m(h);let C=[],_=e.to;if(e.from.trail.minYIndex<e.from.yIndex){const l=e.from.trail.commits.findIndex(L=>L.id===e.from.id),$=e.from.trail.commits[l-1];C=e.to.filter(L=>L.yIndex>$.yIndex),_=e.to.filter(L=>L.yIndex<=$.yIndex),s=$.yIndex}else{s=e.from.yIndex-1;const l=function(A,t){return A&&A.length?(0,r.Z)(A,(0,w.Z)(t,2),n.Z):void 0}(_,$=>$.yIndex);l&&l.yIndex===e.from.yIndex-1&&(_=_.filter($=>$.id!==l.id),d.push(`M ${T} ${a(e.from.yIndex-.5)}`,`L ${m(l.trail.lane.xIndex)} ${a(l.yIndex)}`)),d.push(`M ${T} ${a(e.from.yIndex)}`),d.push(`V ${a(e.from.yIndex-.5)}`)}if(_.length>0){const l=Math.min(..._.map(i=>i.yIndex)),$=c.filter(i=>!this.isLaneOccupied(i,l+1,s)),L=p($,i=>[..._,e.from].reduce((Y,M)=>Y+Math.abs(M.trail.lane.xIndex-i.xIndex),0))??{xIndex:c.length,occupations:[]};0===$.length&&c.push(L),L.occupations.push({type:"merge-path",minYIndex:l+1,maxYIndex:s}),d.push(`M ${T} ${a(s+.5)}`,`L ${m(L.xIndex)} ${a(s+.25)}`,`V ${a(l+.5)}`,..._.flatMap(i=>[`M ${m(L.xIndex)} ${a(i.yIndex+.5)}`,`L ${this.adjustForDashedLine(e.isDashed,L.xIndex,i.trail.lane.xIndex,i.yIndex+.5,i.yIndex,m,a)}`]))}d.push(...C.flatMap(l=>[`M ${T} ${a(l.yIndex+.25)}`,`L ${this.adjustForDashedLine(e.isDashed,h,l.trail.lane.xIndex,l.yIndex+.25,l.yIndex,m,a)}`])),e.path=d.join(" ")}),{mergePaths:t,lanes:c}}calculateColors(t,c){const m=(0,z.Z)(0,c),a=[];t.forEach(e=>{const d=a.filter(h=>h.minYIndexWithMerges<=e.maxYIndexWithMerges&&h.maxYIndexWithMerges>=e.minYIndexWithMerges).map(h=>h.colorIndex),s=N(m,...d);e.colorIndex=s.length>0?s[0]:e.trailIndex%c,a.push(e)})}getLaneMaxYIndex(t){return t.occupations[t.occupations.length-1].maxYIndex}isLaneOccupied(t,c,m){return t.occupations.some(a=>a.minYIndex<=m&&a.maxYIndex>=c)}adjustForDashedLine(t,c,m,a,e,d,s){const T=t?a>e?.15:-.15:0;return`${d(m+(t?c>m?.3:-.3:0))} ${s(e+T)}`}}W.xUnit=15,W.yUnit=26,W.xOffset=W.xUnit/2,W.yOffset=W.yUnit/2,W.\u0275fac=function(t){return new(t||W)},W.\u0275prov=G.Yz7({token:W,factory:W.\u0275fac,providedIn:"root"})},93489:(P,B,o)=>{o.d(B,{Z:()=>S});var r=o(8918);const v=function(E,O,y,U){for(var F=-1,K=null==E?0:E.length;++F<K;){var H=E[F];O(U,H,y(H),E)}return U};var x=o(74126);const p=function(E,O,y,U){return(0,x.Z)(E,function(F,K,H){O(U,F,y(F),H)}),U};var n=o(90441),u=o(7765),b=Object.prototype.hasOwnProperty;const S=(E=function(E,O,y){b.call(E,y)?E[y].push(O):(0,r.Z)(E,y,[O])},function(y,U){var K={};return((0,u.Z)(y)?v:p)(y,E,(0,n.Z)(U,2),K)});var E}}]);