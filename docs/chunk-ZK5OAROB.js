import{Ag as m,B,Ba as Me,D as ye,Dg as Z,E as _e,Ed as Fe,Eh as st,Fd as Le,Fh as rt,Gd as Ve,Gh as it,Hg as $e,I as Re,Ih as nt,J as H,Kc as Ue,L as ge,Lg as F,Q as A,Qg as Ce,R as b,S as x,Si as ct,U as Te,Ug as U,Vh as pt,Xc as Oe,Z as N,Zg as _,Zh as te,_g as g,a as i,aa as C,b as p,ch as w,ee as ze,eh as Xe,ei as lt,fe as He,fi as L,gd as je,i as G,ie as Ne,ih as Ze,jh as qe,kh as q,l as j,lg as Ge,lh as ee,m as c,nh as et,o as D,ob as Be,oh as tt,p as E,q as k,se as Qe,sg as Je,sh as ot,t as me,td as fe,tg as Se,ug as $,v as Ee,ve as We,w as ve,we as Ke,wg as u,xd as De,xf as Ye,xg as X,y as ue,zg as Q}from"./chunk-R5KNYV3F.js";var Ie=class{_multiple;_emitChanges;compareWith;_selection=new Set;_deselectedToEmit=[];_selectedToEmit=[];_selected;get selected(){return this._selected||(this._selected=Array.from(this._selection.values())),this._selected}changed=new G;constructor(a=!1,e,t=!0,o){this._multiple=a,this._emitChanges=t,this.compareWith=o,e&&e.length&&(a?e.forEach(r=>this._markSelected(r)):this._markSelected(e[0]),this._selectedToEmit.length=0)}select(...a){this._verifyValueAssignment(a),a.forEach(t=>this._markSelected(t));let e=this._hasQueuedChanges();return this._emitChangeEvent(),e}deselect(...a){this._verifyValueAssignment(a),a.forEach(t=>this._unmarkSelected(t));let e=this._hasQueuedChanges();return this._emitChangeEvent(),e}setSelection(...a){this._verifyValueAssignment(a);let e=this.selected,t=new Set(a.map(r=>this._getConcreteValue(r)));a.forEach(r=>this._markSelected(r)),e.filter(r=>!t.has(this._getConcreteValue(r,t))).forEach(r=>this._unmarkSelected(r));let o=this._hasQueuedChanges();return this._emitChangeEvent(),o}toggle(a){return this.isSelected(a)?this.deselect(a):this.select(a)}clear(a=!0){this._unmarkAll();let e=this._hasQueuedChanges();return a&&this._emitChangeEvent(),e}isSelected(a){return this._selection.has(this._getConcreteValue(a))}isEmpty(){return this._selection.size===0}hasValue(){return!this.isEmpty()}sort(a){this._multiple&&this.selected&&this._selected.sort(a)}isMultipleSelection(){return this._multiple}_emitChangeEvent(){this._selected=null,(this._selectedToEmit.length||this._deselectedToEmit.length)&&(this.changed.next({source:this,added:this._selectedToEmit,removed:this._deselectedToEmit}),this._deselectedToEmit=[],this._selectedToEmit=[])}_markSelected(a){a=this._getConcreteValue(a),this.isSelected(a)||(this._multiple||this._unmarkAll(),this.isSelected(a)||this._selection.add(a),this._emitChanges&&this._selectedToEmit.push(a))}_unmarkSelected(a){a=this._getConcreteValue(a),this.isSelected(a)&&(this._selection.delete(a),this._emitChanges&&this._deselectedToEmit.push(a))}_unmarkAll(){this.isEmpty()||this._selection.forEach(a=>this._unmarkSelected(a))}_verifyValueAssignment(a){a.length>1&&this._multiple}_hasQueuedChanges(){return!!(this._deselectedToEmit.length||this._selectedToEmit.length)}_getConcreteValue(a,e){if(this.compareWith){e=e??this._selection;for(let t of e)if(this.compareWith(a,t))return t;return a}else return a}};var Et=(()=>{class s{_listeners=[];notify(e,t){for(let o of this._listeners)o(e,t)}listen(e){return this._listeners.push(e),()=>{this._listeners=this._listeners.filter(t=>e!==t)}}ngOnDestroy(){this._listeners=[]}static \u0275fac=function(t){return new(t||s)};static \u0275prov=N({token:s,factory:s.\u0275fac,providedIn:"root"})}return s})();var Nt=(()=>{class s{_animationsDisabled=Ye();state="unchecked";disabled=!1;appearance="full";constructor(){}static \u0275fac=function(t){return new(t||s)};static \u0275cmp=Me({type:s,selectors:[["mat-pseudo-checkbox"]],hostAttrs:[1,"mat-pseudo-checkbox"],hostVars:12,hostBindings:function(t,o){t&2&&Be("mat-pseudo-checkbox-indeterminate",o.state==="indeterminate")("mat-pseudo-checkbox-checked",o.state==="checked")("mat-pseudo-checkbox-disabled",o.disabled)("mat-pseudo-checkbox-minimal",o.appearance==="minimal")("mat-pseudo-checkbox-full",o.appearance==="full")("_mat-animation-noopable",o._animationsDisabled)},inputs:{state:"state",disabled:"disabled",appearance:"appearance"},decls:0,vars:0,template:function(t,o){},styles:[`.mat-pseudo-checkbox{border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:"";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox._mat-animation-noopable{transition:none !important;animation:none !important}.mat-pseudo-checkbox._mat-animation-noopable::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{left:1px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{left:1px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-pseudo-checkbox-minimal-selected-checkmark-color, var(--mat-sys-primary))}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-pseudo-checkbox-minimal-disabled-selected-checkmark-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-pseudo-checkbox-full{border-color:var(--mat-pseudo-checkbox-full-unselected-icon-color, var(--mat-sys-on-surface-variant));border-width:2px;border-style:solid}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-disabled{border-color:var(--mat-pseudo-checkbox-full-disabled-unselected-icon-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate{background-color:var(--mat-pseudo-checkbox-full-selected-icon-color, var(--mat-sys-primary));border-color:rgba(0,0,0,0)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-pseudo-checkbox-full-selected-checkmark-color, var(--mat-sys-on-primary))}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled{background-color:var(--mat-pseudo-checkbox-full-disabled-selected-icon-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-pseudo-checkbox-full-disabled-selected-checkmark-color, var(--mat-sys-surface))}.mat-pseudo-checkbox{width:18px;height:18px}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after{width:14px;height:6px;transform-origin:center;top:-4.2426406871px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{top:8px;width:16px}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after{width:10px;height:4px;transform-origin:center;top:-2.8284271247px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{top:6px;width:12px}
`],encapsulation:2,changeDetection:0})}return s})();var Pe=(()=>{class s{static{this.type="[Repositories] AddRepository"}constructor(e,t={}){this.repositoryPath=e,this.settings=t}}return s})(),at=(()=>{class s{static{this.type="[Repositories] DeleteRepository"}constructor(e){this.repositoryPath=e}}return s})(),dt=(()=>{class s{static{this.type="[Repositories] OpenRepository"}constructor(e){this.repositoryPath=e}}return s})(),ke=(()=>{class s{static{this.type="[Repositories] CloseRepository"}constructor(e){this.repositoryPath=e}}return s})(),ht=(()=>{class s{static{this.type="[Repositories] UpdateRepositoryBookmarks"}constructor(e){this.bookmarks=e}}return s})(),mt=(()=>{class s{static{this.type="[Repositories] ChangeSelectedRemote"}constructor(e,t){this.repositoryPath=e,this.remote=t}}return s})(),ut=(()=>{class s{static{this.type="[Repositories] AddOrUpdateProfileCredential"}constructor(e,t,o){this.repositoryPath=e,this.profileId=t,this.credentials=o}}return s})(),yt=(()=>{class s{static{this.type="[Repositories] ReorderOpenRepositories"}constructor(e){this.repositoryPaths=e}}return s})(),V=(()=>{class s{static{this.type="[Repositories] ChangeSelectedRepository"}constructor(e){this.repositoryPath=e}}return s})(),oe=(()=>{class s{static{this.type="[Repositories] ChangeSelectedCommit"}constructor(e,t){this.repositoryPath=e,this.commitId=t}}return s})(),Rt=(()=>{class s{static{this.type="[Repositories] ChangeSelectedFile"}constructor(e,t){this.repositoryPath=e,this.selected=t}}return s})(),se=(()=>{class s{static{this.type="[Repositories] ChangeSelectedMerge"}constructor(e,t){this.repositoryPath=e,this.mergeId=t}}return s})(),S=(function(s){return s[s.commits=0]="commits",s[s.currentBranch=1]="currentBranch",s[s.currentBranchCommitId=2]="currentBranchCommitId",s[s.currentBranchUpstreamBranch=3]="currentBranchUpstreamBranch",s[s.headCommitId=4]="headCommitId",s[s.mergeHeads=5]="mergeHeads",s[s.merges=6]="merges",s[s.name=7]="name",s[s.references=8]="references",s[s.remotes=9]="remotes",s[s.stagedChanges=10]="stagedChanges",s[s.stashes=11]="stashes",s[s.submodules=12]="submodules",s[s.unstagedChanges=13]="unstagedChanges",s})(S||{}),z=(()=>{class s{static{this.type="[Repositories] RefreshRepository"}constructor(e,t=null){this.repositoryPath=e,this.scopes=t}}return s})(),Ae=(()=>{class s{static{this.type="[Repositories] LoadRepositoryCommits"}constructor(e,t,o){this.repositoryPath=e,this.toCommitId=t,this.cancel=o}}return s})(),re=(()=>{class s{static{this.type="[Repositories] ScrollRepository"}constructor(e,t){this.repositoryPath=e,this.scrollIndex=t}}return s})(),ie=(()=>{class s{static{this.type="[Repositories] ScrollRepositoryToCommit"}constructor(e,t){this.repositoryPath=e,this.commitId=t}}return s})();var gt=(()=>{class s{static{this.type="[Repositories] UpdateCommitMessage"}constructor(e,t){this.repositoryPath=e,this.message=t}}return s})(),ne=(()=>{class s{static{this.type="[Repositories] ChangeVisibleReferences"}constructor(e,t){this.repositoryPath=e,this.referenceNames=t}}return s})(),ft=(()=>{class s{static{this.type="[Repositories] ChangeBranchesExpanded"}constructor(e,t,o){this.repositoryPath=e,this.branchNames=t,this.expanded=o}}return s})(),St=(()=>{class s{static{this.type="[Repositories] ResetState"}}return s})();var pe=(()=>{class s{static{this.type="[RepositoriesTransient] InitializeTransient"}constructor(e,t){this.repositoryIds=e,this.selectedRepositoryId=t}}return s})(),W=(()=>{class s{static{this.type="[RepositoriesTransient] OpenTransientRepository"}constructor(e){this.repositoryPath=e}}return s})(),le=(()=>{class s{static{this.type="[RepositoriesTransient] CloseTransientRepository"}constructor(e){this.repositoryPath=e}}return s})(),xe=(()=>{class s{static{this.type="[RepositoriesTransient] WorkingDirectoryChanged"}constructor(e){this.repositoryPath=e}}return s})(),Ct=(()=>{class s{static{this.type="[RepositoriesTransient] LoadCommitEdit"}constructor(e,t){this.repositoryPath=e,this.rootCommitId=t}}return s})(),It=(()=>{class s{static{this.type="[RepositoriesTransient] PerformRepositoryAction"}constructor(e,t){this.repositoryPath=e,this.action=t}}return s})(),bt=(()=>{class s{static{this.type="[RepositoriesTransient] UndoLastAction"}constructor(e){this.repositoryPath=e}}return s})(),Pt=(()=>{class s{static{this.type="[RepositoriesTransient] RedoLastAction"}constructor(e){this.repositoryPath=e}}return s})(),kt=(()=>{class s{static{this.type="[RepositoriesTransient] ResetState"}}return s})();var ce=new Ge("repositories"),Jt=s=>p(i({},s),{repositorySettings:_(s.repositorySettings,(a,e)=>p(i({},e),{profiles:Array.from(e.profiles.entries()),expandedBranches:[...e.expandedBranches]}))}),$t=s=>p(i({},s),{repositorySettings:_(s.repositorySettings,(a,e)=>p(i({},e),{profiles:new Map(e.profiles),expandedBranches:new Set(e.expandedBranches)}))});var T,At={isInitialized:!1,openRepositories:{},loadingRepositories:{}},R=(()=>{let s=class ae{static{T=this}static{this.maxUndoActions=10}static isInitialized(e){return e.isInitialized}static openRepositories(e){return e.openRepositories}static loadingRepositories(e){return e.loadingRepositories}static repositorySettings(e){return e.repositorySettings}static mostRecentAction(e){return Q([T],t=>t.openRepositories[e]?.recentActions[0]??null)}static mostRecentActionState(e){return Q([T],t=>t.openRepositories[e]?.mostRecentActionState??null)}initializeTransient(e,t){return e.dispatch(new V(null)).pipe(x(()=>{e.setState(o=>p(i({},o),{isInitialized:!0}))}),A(()=>me(t.repositoryIds.map(o=>o===t.selectedRepositoryId?e.dispatch(new W(o)).pipe(b(Ee(3e3)),A(()=>e.dispatch(new V(o))),x(()=>this.router.navigate(["/standard/default"]))):e.dispatch(new W(o))))))}openTransientRepository(e,t){if(!(e.getState().openRepositories[t.repositoryPath]||e.getState().loadingRepositories[t.repositoryPath]))return this.repositoriesApi.getRepositoryName(t.repositoryPath).pipe(x(o=>{e.setState(r=>p(i({},r),{loadingRepositories:p(i({},r.loadingRepositories),{[t.repositoryPath]:{loaded:!1,name:o}})}))}),A(()=>this.repositoriesApi.openRepository(t.repositoryPath)),A(()=>{let o=this.refreshQueue[t.repositoryPath]??new Map;this.refreshQueue[t.repositoryPath]||(this.refreshQueue[t.repositoryPath]=o);let r=Object.values(S).filter(l=>typeof l=="number"),n=[];for(let l of r){let d=new G;o.set(l,d),n.push([l,d])}return this.refreshScopes(e,t.repositoryPath,n)}),x(o=>{if(this.watcherSubscriptions[t.repositoryPath])throw new De(t.repositoryPath);this.watcherSubscriptions[t.repositoryPath]=this.repositoriesApi.onWorkingDirectoryChanges(t.repositoryPath).subscribe(()=>e.dispatch(new xe(t.repositoryPath))),e.setState(n=>p(i({},n),{openRepositories:p(i({},n.openRepositories),{[t.repositoryPath]:p(i(i({name:"<Unknown>",remotes:[],commits:[],merges:[],allCommitsLoaded:!1,headCommitId:null,stagedChanges:[],unstagedChanges:[],selectedFile:null,references:[],currentBranch:null,currentBranchCommitId:null,currentBranchUpstreamBranch:null,submodules:[],mergeHeads:[],stashes:[]},n.openRepositories[t.repositoryPath]),Object.fromEntries(o.flat())),{scrollIndex:0,selectedMergeId:null,loaded:!0,loadingCommitEdit:!1,recentActions:[],recentUndoneActions:[],performingAction:null,mostRecentActionState:null})})}));let r=e.getState().openRepositories[t.repositoryPath]?.remotes;r&&this.loadAvatars(r)}),B(o=>(e.setState(r=>p(i({},r),{openRepositories:F(r.openRepositories,t.repositoryPath)})),ze.matches(o)?E(()=>new w(o)):He.matches(o)?E(()=>new w(o)):E(()=>o))),H(()=>{e.setState(o=>p(i({},o),{loadingRepositories:F(o.loadingRepositories,t.repositoryPath)}))}))}closeTransientRepository(e,t){return e.setState(o=>{let r=this.watcherSubscriptions[t.repositoryPath];r&&(r.unsubscribe(),delete this.watcherSubscriptions[t.repositoryPath]);let n=this.refreshQueue[t.repositoryPath];if(n){for(let l of n.values())l.next(),l.complete();delete this.refreshQueue[t.repositoryPath]}return p(i({},o),{openRepositories:F(o.openRepositories,t.repositoryPath),loadingRepositories:F(o.loadingRepositories,t.repositoryPath)})}),this.repositoriesApi.closeRepository(t.repositoryPath)}changeSelectedCommit(e,t){e.setState(o=>p(i({},o),{openRepositories:g(o.openRepositories,t.repositoryPath,r=>p(i({},r),{selectedFile:null,selectedMergeId:t.commitId?null:r.selectedMergeId}))}))}changeSelectedMerge(e,t){let o=e.getState().openRepositories[t.repositoryPath]?.selectedMergeId;o?.fromId===t.mergeId?.fromId&&o?.toId===t.mergeId?.toId||e.setState(r=>p(i({},r),{openRepositories:g(r.openRepositories,t.repositoryPath,n=>p(i({},n),{selectedFile:null,selectedMergeId:t.mergeId}))}))}changeSelectedFile(e,t){e.setState(o=>p(i({},o),{openRepositories:g(o.openRepositories,t.repositoryPath,r=>p(i({},r),{selectedFile:t.selected}))}))}workingDirectoryChanged(e,t){return e.dispatch(new z(t.repositoryPath,[S.mergeHeads,S.unstagedChanges,S.submodules]))}refreshRepository(e,t){if(!e.getState().openRepositories[t.repositoryPath])throw new w(new fe(t.repositoryPath));let o=this.refreshQueue[t.repositoryPath]??new Map;this.refreshQueue[t.repositoryPath]||(this.refreshQueue[t.repositoryPath]=o);let r=t.scopes??Object.values(S).filter(l=>typeof l=="number"),n=[];for(let l of r){let d=o.get(l);d?d.next():(d=new G,o.set(l,d)),n.push([l,d])}return this.refreshScopes(e,t.repositoryPath,n).pipe(x(l=>{let d=e.getState().openRepositories[t.repositoryPath];if(!d)throw new w(new fe(t.repositoryPath));e.setState(h=>p(i({},h),{openRepositories:p(i({},h.openRepositories),{[t.repositoryPath]:i(i({},d),Object.fromEntries(l.flat()))})}))}))}loadRepositoryCommits(e,t){let o=e.getState().openRepositories[t.repositoryPath],n=this.store.selectSnapshot(T.repositorySettings)[t.repositoryPath]?.visibleReferences??null;if(o&&!o.allCommitsLoaded)return t.toCommitId?o.commits.some(l=>l.id===t.toCommitId)?void 0:D([o.commits,o.commits.length,o.allCommitsLoaded]).pipe(Re(([l,d,h])=>h||l.some(I=>I.id===t.toCommitId)?j:this.historyApi.getHistory(t.repositoryPath,n,d).pipe(b(t.cancel??ue),k(I=>[[...l,...I],d+U,I.length<U]))),ge(),x(([l,,d])=>{e.setState(h=>p(i({},h),{openRepositories:g(h.openRepositories,t.repositoryPath,f=>p(i({},f),{commits:d||l.length>f.commits.length?l:f.commits,allCommitsLoaded:d||f.allCommitsLoaded}))}))})):this.historyApi.getHistory(t.repositoryPath,n,o.commits.length).pipe(b(t.cancel??ue),x(l=>{e.setState(d=>p(i({},d),{openRepositories:g(d.openRepositories,t.repositoryPath,h=>p(i({},h),{commits:[...h.commits,...l],allCommitsLoaded:l.length<U}))}))}))}scrollRepository(e,t){e.setState(o=>p(i({},o),{openRepositories:g(o.openRepositories,t.repositoryPath,r=>p(i({},r),{scrollIndex:t.scrollIndex}))}))}scrollRepositoryToCommit(e,t){if(t.commitId==="head"){e.setState(o=>p(i({},o),{openRepositories:g(o.openRepositories,t.repositoryPath,r=>p(i({},r),{scrollIndex:0}))}));return}if(t.commitId.startsWith("merge:")){let o=t.commitId.match(/^merge:([^:]+):([^:]+)$/);o&&e.setState(r=>p(i({},r),{openRepositories:g(r.openRepositories,t.repositoryPath,n=>{let l=n.merges.findIndex(h=>h.fromCommitId===o[1]&&h.toCommitId===o[2]),d=n.stagedChanges?.length>0||n.unstagedChanges?.length>0||n.commits.length===0;return p(i({},n),{scrollIndex:l>=0?l+(d?1:0):n.scrollIndex})})}));return}return e.dispatch(new Ae(t.repositoryPath,t.commitId,this.actions.pipe(Se(re,ie)))).pipe(b(this.actions.pipe(Se(re,ie))),x(()=>{e.setState(o=>p(i({},o),{openRepositories:g(o.openRepositories,t.repositoryPath,r=>{let n=r.commits.findIndex(h=>h.id===t.commitId),l=r.stagedChanges?.length>0||r.unstagedChanges?.length>0||r.commits.length===0,d=n>=0?n+(l?1:0)+r.merges.length:r.scrollIndex;return p(i({},r),{scrollIndex:d})})}))}))}loadCommitEdit(e,t){return e.setState(o=>p(i({},o),{openRepositories:g(o.openRepositories,t.repositoryPath,r=>p(i({},r),{loadingCommitEdit:!0}))})),this.commitsApi.startCommitEditing(t.repositoryPath,t.rootCommitId).pipe(B(o=>Ne.matches(o)?E(()=>new w(o)):je.matches(o)?E(()=>new w(o)):E(()=>o)),A(()=>e.dispatch(new z(t.repositoryPath))),H(()=>{e.setState(o=>p(i({},o),{openRepositories:g(o.openRepositories,t.repositoryPath,r=>p(i({},r),{loadingCommitEdit:!1}))}))}))}performRepositoryAction(e,t){e.setState(n=>p(i({},n),{openRepositories:g(n.openRepositories,t.repositoryPath,l=>p(i({},l),{performingAction:"do"}))}));let o=!!t.action.undo,r=()=>{o=!1};return t.action.do(r).pipe(x(n=>{e.setState(l=>p(i({},l),{openRepositories:g(l.openRepositories,t.repositoryPath,d=>p(i({},d),{recentActions:o?[p(i({},t.action),{state:n}),...d.recentActions].slice(0,T.maxUndoActions):[],recentUndoneActions:[],mostRecentActionState:n}))}))}),H(()=>{e.setState(n=>p(i({},n),{openRepositories:g(n.openRepositories,t.repositoryPath,l=>p(i({},l),{performingAction:null}))}))}))}undoLastAction(e,t){let[o,...r]=e.getState().openRepositories[t.repositoryPath]?.recentActions??[],n=o?.undo;if(!o||!n){e.setState(l=>p(i({},l),{openRepositories:g(l.openRepositories,t.repositoryPath,d=>p(i({},d),{recentActions:[],recentUndoneActions:[],performingAction:null,mostRecentActionState:null}))}));return}return e.setState(l=>p(i({},l),{openRepositories:g(l.openRepositories,t.repositoryPath,d=>p(i({},d),{recentActions:r,recentUndoneActions:[o,...d.recentUndoneActions].slice(0,T.maxUndoActions),performingAction:"undo",mostRecentActionState:r[0]?.state??null}))})),n(o.state).pipe(B(l=>{e.setState(f=>p(i({},f),{openRepositories:g(f.openRepositories,t.repositoryPath,I=>p(i({},I),{recentActions:[],recentUndoneActions:[],mostRecentActionState:null}))}));let d=this.translateService.translate(o.name),{text:h}=this.translateService.translateError(l);throw new w(new We(d,h))}),H(()=>{e.setState(l=>p(i({},l),{openRepositories:g(l.openRepositories,t.repositoryPath,d=>p(i({},d),{performingAction:null}))}))}))}redoLastAction(e,t){let[o,...r]=e.getState().openRepositories[t.repositoryPath]?.recentUndoneActions??[];if(!o)return;e.setState(d=>p(i({},d),{openRepositories:g(d.openRepositories,t.repositoryPath,h=>p(i({},h),{performingAction:"redo"}))}));let n=!!o.undo,l=()=>{n=!1};return o.do(l).pipe(x(d=>{e.setState(h=>p(i({},h),{openRepositories:g(h.openRepositories,t.repositoryPath,f=>p(i({},f),{recentActions:n?[p(i({},o),{state:d}),...f.recentActions].slice(0,T.maxUndoActions):[],recentUndoneActions:r,mostRecentActionState:d}))}))}),B(d=>{e.setState(I=>p(i({},I),{openRepositories:g(I.openRepositories,t.repositoryPath,P=>p(i({},P),{recentActions:[],recentUndoneActions:[],mostRecentActionState:null}))}));let h=this.translateService.translate(o.name),{text:f}=this.translateService.translateError(d);throw new w(new Ke(h,f))}),H(()=>{e.setState(d=>p(i({},d),{openRepositories:g(d.openRepositories,t.repositoryPath,h=>p(i({},h),{performingAction:null}))}))}))}resetState(e,t){e.setState(Z(At));for(let o of Object.values(this.watcherSubscriptions))o.unsubscribe();this.watcherSubscriptions={},this.refreshQueue={}}constructor(e,t,o,r,n,l,d,h,f,I,P,y,O){this.router=e,this.actions=t,this.store=o,this.avatarCacheService=r,this.commitsApi=n,this.historyApi=l,this.mergesApi=d,this.providerUrlMatcherService=h,this.remotesApi=f,this.repositoriesApi=I,this.stashApi=P,this.submodulesApi=y,this.translateService=O,this.watcherSubscriptions={},this.refreshQueue={}}loadAvatars(e){let t=e.flatMap(o=>{let r=this.providerUrlMatcherService.matchProvider(o.url);return r?.type==="bitbucket"||r?.type==="github"?r:[]});for(let o of t)this.avatarCacheService.loadFromCommits(o)}refreshScopes(e,t,o){let r=e.getState().openRepositories[t],n=r?.scrollIndex??0,l=r?.selectedFile??null,d=I=>I.oldFilePath===l?.oldFilePath&&I.newFilePath===l?.newFilePath,h=(...I)=>I,f=o.map(([I,P])=>{switch(I){case S.commits:{let y=this.store.selectSnapshot(T.repositorySettings)[t];if(!y)return D([]);let O=y.visibleReferences;return this.historyApi.getHistory(t,O,0).pipe(b(P),A(M=>D([M,U,M.length<U]).pipe(Re(([Y,v,he])=>he||v>=n?j:this.historyApi.getHistory(t,O,v).pipe(k(we=>[[...Y,...we],v+U,we.length<U]))),ge(),b(P),k(([Y,,v])=>h(["commits",Y],["allCommitsLoaded",v])))))}case S.currentBranch:return this.repositoriesApi.getCurrentBranch(t).pipe(b(P),k(y=>h(["currentBranch",y])));case S.currentBranchCommitId:return this.repositoriesApi.getCurrentBranchCommitId(t).pipe(b(P),k(y=>h(["currentBranchCommitId",y])));case S.currentBranchUpstreamBranch:return this.repositoriesApi.getCurrentBranchUpstreamBranch(t).pipe(b(P),k(y=>h(["currentBranchUpstreamBranch",y])));case S.headCommitId:return this.historyApi.getHeadCommitId(t).pipe(b(P),k(y=>h(["headCommitId",y])));case S.mergeHeads:return this.mergesApi.getMergeHeads(t).pipe(b(P),k(y=>h(["mergeHeads",y])));case S.merges:return this.mergesApi.getMerges(t).pipe(b(P),k(y=>h(["merges",y])));case S.name:return this.repositoriesApi.getRepositoryName(t).pipe(b(P),k(y=>h(["name",y])));case S.references:{let y=this.store.selectSnapshot(T.repositorySettings)[t];if(!y)return D([]);let O=y.visibleReferences;return this.repositoriesApi.getReferences(t).pipe(b(P),A(M=>{let Y=new Set(M.map(J=>J.name)),v=O?.filter(J=>Y.has(J))??null,he=!$e(O,v);return this.store.dispatch(new ne(t,v&&v.length>0?v:null)).pipe(A(()=>he?this.store.dispatch(new z(t,[S.commits])).pipe(k(()=>M)):D(M)))}),k(M=>h(["references",M])))}case S.remotes:return this.remotesApi.getRemotes(t).pipe(b(P),k(y=>h(["remotes",y])));case S.stagedChanges:return this.repositoriesApi.getStagedChanges(t).pipe(b(P),k(y=>l?.area==="staged"&&!y.some(d)?h(["stagedChanges",y],["selectedFile",null]):h(["stagedChanges",y])));case S.stashes:return this.stashApi.get(t).pipe(b(P),k(y=>h(["stashes",y])));case S.submodules:return this.submodulesApi.getSubmoduleNames(t).pipe(b(P),k(y=>h(["submodules",y])),ye([]));case S.unstagedChanges:return this.repositoriesApi.getUnstagedChanges(t).pipe(b(P),k(y=>l?.area==="unstaged"&&!y.some(d)?h(["unstagedChanges",y],["selectedFile",null]):h(["unstagedChanges",y])));default:return D([])}});return me(f.map(I=>I.pipe(ye([]))))}static{this.\u0275fac=function(t){return new(t||ae)(C(Ue),C(Je),C($),C(te),C(Xe),C(Ze),C(qe),C(ct),C(q),C(ee),C(et),C(tt),C(ot))}}static{this.\u0275prov=N({token:ae,factory:ae.\u0275fac})}};return c([u(pe)],s.prototype,"initializeTransient",null),c([u(W)],s.prototype,"openTransientRepository",null),c([u(le)],s.prototype,"closeTransientRepository",null),c([u(oe)],s.prototype,"changeSelectedCommit",null),c([u(se)],s.prototype,"changeSelectedMerge",null),c([u(Rt)],s.prototype,"changeSelectedFile",null),c([u(xe)],s.prototype,"workingDirectoryChanged",null),c([u(z)],s.prototype,"refreshRepository",null),c([u(Ae,{cancelUncompleted:!0})],s.prototype,"loadRepositoryCommits",null),c([u(re)],s.prototype,"scrollRepository",null),c([u(ie)],s.prototype,"scrollRepositoryToCommit",null),c([u(Ct)],s.prototype,"loadCommitEdit",null),c([u(It)],s.prototype,"performRepositoryAction",null),c([u(bt)],s.prototype,"undoLastAction",null),c([u(Pt)],s.prototype,"redoLastAction",null),c([u(kt)],s.prototype,"resetState",null),c([m()],s,"isInitialized",null),c([m()],s,"openRepositories",null),c([m()],s,"loadingRepositories",null),c([m([ce])],s,"repositorySettings",null),s})();R=T=c([X({name:"repositoriesTransient",defaults:At})],R);var K,wt={version:5,openRepositoryIds:[],recentlyClosed:[],repositoryBookmarks:[],repositorySettings:{},selectedRepositoryId:null},xt=(()=>{let s=class de{static{K=this}static{this.maxRecentlyClosed=10}static repositoryBookmarks(e){return e.repositoryBookmarks}static repositorySettings(e){return e.repositorySettings}static openRepositoryIds(e){return e.openRepositoryIds}static openRepositories(e,t){return e.openRepositoryIds.flatMap(o=>{let r=e.repositorySettings[o],n=t.openRepositories[o];return r&&n?i(i({},r),n):[]})}static openOrLoadingRepositories(e,t){return e.openRepositoryIds.flatMap(o=>{let r=e.repositorySettings[o],n=t.openRepositories[o];if(r&&n)return i(i({},r),n);let l=e.repositorySettings[o];return r&&l?i(i({},r),l):[]})}static recentRepositories(e){return e.recentlyClosed}static repositoryNames(e,t){return Object.fromEntries([...Object.entries(t.openRepositories).map(([o,r])=>[o,r.name]),...e.recentlyClosed.map(o=>[o.repositoryId,o.name])])}static selectedRepository(e,t){if(e.selectedRepositoryId===null)return null;let o=e.repositorySettings[e.selectedRepositoryId],r=t.openRepositories[e.selectedRepositoryId];return o&&r?i(i({},o),r):null}static selectedRemote(e){return e.selectedRepositoryId===null?null:e.repositorySettings[e.selectedRepositoryId]?.selectedRemote??null}static selectedRemotes(e,t){return e.selectedRepositoryId===null?null:t.openRepositories[e.selectedRepositoryId]?.remotes??null}static remotesForRepository(e){return Q([K,R],(t,o)=>{let r=o.openRepositories[e];return r?r.remotes:null})}static selectedRepositoryPath(e){return e.selectedRepositoryId===null?null:e.repositorySettings[e.selectedRepositoryId]?.path??null}static selectedCommitId(e){return e.selectedRepositoryId===null?null:e.repositorySettings[e.selectedRepositoryId]?.selectedCommitId??null}static selectedMergeId(e,t){return e.selectedRepositoryId===null?null:t.openRepositories[e.selectedRepositoryId]?.selectedMergeId??null}static selectedFile(e,t){return e.selectedRepositoryId===null?null:t.openRepositories[e.selectedRepositoryId]?.selectedFile??null}static selectedFileForArea(e){return Q([K,R],(t,o)=>{if(t.selectedRepositoryId===null)return null;let r=o.openRepositories[t.selectedRepositoryId]?.selectedFile??null;return r?.area===e?r:null})}static selectedStagedChanges(e,t){return e.selectedRepositoryId===null?null:t.openRepositories[e.selectedRepositoryId]?.stagedChanges??null}static selectedUnstagedChanges(e,t){return e.selectedRepositoryId===null?null:t.openRepositories[e.selectedRepositoryId]?.unstagedChanges??null}static selectedMergeHeads(e,t){return e.selectedRepositoryId===null?null:t.openRepositories[e.selectedRepositoryId]?.mergeHeads??null}static selectedRepositoryHeadCommitId(e,t){return e.selectedRepositoryId===null?null:t.openRepositories[e.selectedRepositoryId]?.headCommitId??null}static selectedRepositoryCommits(e,t){return e.selectedRepositoryId===null?null:t.openRepositories[e.selectedRepositoryId]?.commits??null}static selectedRepositoryCredentials(e,t){if(!e.selectedRepositoryId)return{};let o=e.repositorySettings[e.selectedRepositoryId]?.profiles.get(t.selectedProfileId)?.remotes;return o?Object.fromEntries(Object.entries(o).map(([r,{credentialId:n}])=>{let l=n===null?null:t.credentials.get(n)??null;return[r,l?p(i({},l),{credentialId:n}):null]})):{}}static selectedRepositoryLocalBranches(e,t){return e.selectedRepositoryId===null?null:t.openRepositories[e.selectedRepositoryId]?.references.filter(o=>o.type==="local")??null}static selectedRepositoryRemoteBranches(e,t){return e.selectedRepositoryId===null?null:t.openRepositories[e.selectedRepositoryId]?.references.filter(o=>o.type==="remote")??null}static selectedRepositoryTags(e,t){return e.selectedRepositoryId===null?null:t.openRepositories[e.selectedRepositoryId]?.references.filter(o=>o.type==="tag")??null}static selectedRepositoryCurrentBranch(e,t){return e.selectedRepositoryId===null?null:t.openRepositories[e.selectedRepositoryId]?.currentBranch??null}static selectedRepositoryCurrentBranchCommitId(e,t){return e.selectedRepositoryId===null?null:t.openRepositories[e.selectedRepositoryId]?.currentBranchCommitId??null}static selectedRepositoryCurrentBranchUpstreamBranch(e,t){return e.selectedRepositoryId===null?null:t.openRepositories[e.selectedRepositoryId]?.currentBranchUpstreamBranch??null}static selectedRepositorySubmodules(e,t){return e.selectedRepositoryId===null?[]:t.openRepositories[e.selectedRepositoryId]?.submodules??[]}static selectedRepositoryCommitMessage(e){return e.selectedRepositoryId===null?null:e.repositorySettings[e.selectedRepositoryId]?.commitMessage??null}static selectedRepositoryVisibleReferences(e){return e.selectedRepositoryId===null?null:e.repositorySettings[e.selectedRepositoryId]?.visibleReferences??null}static selectedRepositoryExpandedBranches(e){return e.selectedRepositoryId===null?new Set:e.repositorySettings[e.selectedRepositoryId]?.expandedBranches??new Set}static selectedRepositoryLoadingCommitEdit(e,t){return e.selectedRepositoryId===null?!1:t.openRepositories[e.selectedRepositoryId]?.loadingCommitEdit??!1}static selectedRepositoryPerformingAction(e,t){return e.selectedRepositoryId===null?null:t.openRepositories[e.selectedRepositoryId]?.performingAction??null}static selectedRepositoryMostRecentAction(e,t){return e.selectedRepositoryId===null?null:t.openRepositories[e.selectedRepositoryId]?.recentActions?.[0]??null}static selectedRepositoryMostRecentUndoneAction(e,t){return e.selectedRepositoryId===null?null:t.openRepositories[e.selectedRepositoryId]?.recentUndoneActions?.[0]??null}static selectedRepositoryStashes(e,t){return e.selectedRepositoryId===null?null:t.openRepositories[e.selectedRepositoryId]?.stashes??null}addRepository(e,t){e.setState(o=>o.repositorySettings[t.repositoryPath]?o:p(i({},o),{repositorySettings:p(i({},o.repositorySettings),{[t.repositoryPath]:i({path:t.repositoryPath,selectedCommitId:"head",profiles:new Map,selectedRemote:"origin",remoteSettings:new Map,commitMessage:null,visibleReferences:null,expandedBranches:new Set},t.settings)})}))}deleteRepository(e,t){return e.dispatch(new ke(t.repositoryPath)).pipe(x(()=>{let o=r=>{for(let n of r){if("children"in n){if(o(n.children))return!0;continue}if(n.repositoryId===t.repositoryPath)return!0}return!1};e.setState(r=>p(i({},r),{recentlyClosed:r.recentlyClosed.filter(n=>n.repositoryId!==t.repositoryPath),repositorySettings:o(r.repositoryBookmarks)?r.repositorySettings:F(r.repositorySettings,t.repositoryPath)}))}))}openRepository(e,t){let o=this.store.selectSnapshot(R.openRepositories);if(!o[t.repositoryPath])return e.dispatch(new Pe(t.repositoryPath)).pipe(A(()=>this.authService.accessLevel.pipe(_e(1))),A(r=>r==="pro"||Object.keys(o).length<2?(e.setState(n=>p(i({},n),{openRepositoryIds:Ce([...n.openRepositoryIds,t.repositoryPath]),recentlyClosed:n.recentlyClosed.filter(l=>l.repositoryId!==t.repositoryPath)})),e.dispatch(new W(t.repositoryPath)).pipe(B(n=>this.repositoriesApi.getRepositoryName(t.repositoryPath).pipe(A(l=>(e.setState(d=>p(i({},d),{openRepositoryIds:d.openRepositoryIds.filter(h=>h!==t.repositoryPath),recentlyClosed:[{date:new Date,name:l,repositoryId:t.repositoryPath},...d.recentlyClosed],selectedRepositoryId:d.selectedRepositoryId===t.repositoryPath?null:d.selectedRepositoryId})),E(()=>n))))))):(this.telemetryService.reportLead("Tried to open more than two tabs."),E(()=>new w(new Oe)))))}closeRepository(e,t){return this.repositoriesApi.getRepositoryName(t.repositoryPath).pipe(A(o=>(e.setState(r=>{let n=r.openRepositoryIds.findIndex(f=>f===t.repositoryPath);if(n===-1)return r;let l=r.openRepositoryIds.filter(f=>f!==t.repositoryPath),d=r.recentlyClosed.findIndex(f=>f.repositoryId===t.repositoryPath),h=d>=0?[...r.recentlyClosed.slice(0,d),...r.recentlyClosed.slice(d+1)]:r.recentlyClosed.slice(0,K.maxRecentlyClosed-1);return p(i({},r),{recentlyClosed:[{date:new Date,name:o,repositoryId:t.repositoryPath},...h],openRepositoryIds:l,selectedRepositoryId:r.selectedRepositoryId===t.repositoryPath?l.length>0?n<l.length?l[n]??null:l[l.length-1]??null:null:r.selectedRepositoryId})}),e.dispatch(new le(t.repositoryPath)))))}updateRepositoryBookmarks(e,t){e.setState(o=>p(i({},o),{repositoryBookmarks:t.bookmarks}))}changeSelectedRemote(e,t){return this.remotesApi.getRemotes(t.repositoryPath).pipe(A(o=>t.remote&&o.every(r=>r.name!==t.remote)?E(()=>new w(new Qe(t.remote??"",o.map(r=>r.name)))):(e.setState(r=>p(i({},r),{repositorySettings:g(r.repositorySettings,t.repositoryPath,n=>p(i({},n),{selectedRemote:t.remote}))})),j)))}addOrUpdateProfileCredential(e,t){e.setState(o=>p(i({},o),{repositorySettings:g(o.repositorySettings,t.repositoryPath,r=>p(i({},r),{profiles:new Map([...r.profiles,[t.profileId,t.credentials]])}))}))}reorderOpenRepositories(e,t){e.setState(o=>{let r=this.store.selectSnapshot(R.openRepositories),n=this.store.selectSnapshot(R.loadingRepositories);if(Object.keys(r).length+Object.keys(n).length!==o.openRepositoryIds.length)throw new Fe(Object.keys(r),Object.keys(n),o.openRepositoryIds);if(t.repositoryPaths.length!==Ce(t.repositoryPaths).length)throw new Le(t.repositoryPaths);if(o.openRepositoryIds.some(l=>!t.repositoryPaths.includes(l))||t.repositoryPaths.some(l=>!o.openRepositoryIds.includes(l)))throw new Ve(t.repositoryPaths,o.openRepositoryIds);return p(i({},o),{openRepositoryIds:t.repositoryPaths})})}changeSelectedRepository(e,t){e.setState(o=>p(i({},o),{selectedRepositoryId:t.repositoryPath&&o.openRepositoryIds.includes(t.repositoryPath)?t.repositoryPath:null}))}changeSelectedCommit(e,t){(e.getState().repositorySettings[t.repositoryPath]?.selectedCommitId??null)!==t.commitId&&e.setState(o=>p(i({},o),{repositorySettings:g(o.repositorySettings,t.repositoryPath,r=>p(i({},r),{selectedCommitId:t.commitId}))}))}changeSelectedMerge(e,t){e.setState(o=>p(i({},o),{repositorySettings:g(o.repositorySettings,t.repositoryPath,r=>p(i({},r),{selectedCommitId:t.mergeId?null:r.selectedCommitId}))}))}updateCommitMessage(e,t){e.setState(o=>p(i({},o),{repositorySettings:_(o.repositorySettings,(r,n)=>r===t.repositoryPath?p(i({},n),{commitMessage:t.message}):n)}))}changeVisibleReferences(e,t){e.setState(o=>p(i({},o),{repositorySettings:_(o.repositorySettings,(r,n)=>r===t.repositoryPath?p(i({},n),{visibleReferences:t.referenceNames}):n)}))}changeBranchesExpanded(e,t){e.setState(o=>p(i({},o),{repositorySettings:_(o.repositorySettings,(r,n)=>{if(r!==t.repositoryPath)return n;let l=new Set(n.expandedBranches);if(t.expanded)for(let d of t.branchNames)l.add(d);else for(let d of t.branchNames)l.delete(d);return p(i({},n),{expandedBranches:l})})}))}addOrUpdateProfile(e,t){let o=e.getState().selectedRepositoryId;!o||this.store.selectSnapshot(L.selectedProfileId)!==t.id||t.profile.allowedRepositories!=="all"&&!t.profile.allowedRepositories.includes(o)&&this.store.dispatch(new V(null))}setSelectedProfile(e,t){let o=e.getState().selectedRepositoryId;if(!o)return;let r=this.store.selectSnapshot(L.profiles).get(t.profileId);r&&r.allowedRepositories!=="all"&&!r.allowedRepositories.includes(o)&&this.store.dispatch(new V(null))}deleteProfile(e,t){e.setState(o=>p(i({},o),{repositorySettings:_(o.repositorySettings,(r,n)=>p(i({},n),{profiles:new Map([...n.profiles].filter(([l])=>l!==t.id))}))}))}deleteCredential(e,t){e.setState(o=>p(i({},o),{repositorySettings:_(o.repositorySettings,(r,n)=>p(i({},n),{profiles:new Map([...n.profiles].map(([l,d])=>[l,d&&{remotes:_(d.remotes,(h,f)=>f.credentialId===t.id?p(i({},f),{credentialId:null}):f)}]))}))}))}resetState(e,t){e.setState(Z(wt))}constructor(e,t,o,r,n,l){this.store=e,this.authService=t,this.avatarCacheService=o,this.remotesApi=r,this.repositoriesApi=n,this.telemetryService=l}ngxsOnInit(e){this.authService.init().then(()=>{let t=e.getState();e.dispatch(new pe(t.openRepositoryIds,t.selectedRepositoryId)).subscribe(()=>{this.setupAutoFetch(),this.avatarCacheService.loadFromIntegrations()})})}setupAutoFetch(){return this.store.select(L.autoFetchInterval).pipe(A(e=>e?ve(e):j),Te(this.store.select(K.openRepositories),this.store.select(L.selectedProfileId),this.store.select(L.credentials)),x(([,e,t,o])=>{for(let r of e)this.remotesApi.fetchAll(r.path,this.getRepositoryCredentials(r.profiles,t,o)).pipe(B(()=>j)).subscribe(()=>{this.store.dispatch(new z(r.path,[S.commits,S.references]))})})).subscribe()}getRepositoryCredentials(e,t,o){if(!t)return{};let r=e.get(t)?.remotes;return r?Object.fromEntries(Object.entries(r).map(([n,{credentialId:l}])=>[n,l===null?null:o.get(l)??null])):{}}static{this.\u0275fac=function(t){return new(t||de)(C($),C(pt),C(te),C(q),C(ee),C(lt))}}static{this.\u0275prov=N({token:de,factory:de.\u0275fac})}};return c([u(Pe)],s.prototype,"addRepository",null),c([u(at)],s.prototype,"deleteRepository",null),c([u(dt)],s.prototype,"openRepository",null),c([u(ke)],s.prototype,"closeRepository",null),c([u(ht)],s.prototype,"updateRepositoryBookmarks",null),c([u(mt)],s.prototype,"changeSelectedRemote",null),c([u(ut)],s.prototype,"addOrUpdateProfileCredential",null),c([u(yt)],s.prototype,"reorderOpenRepositories",null),c([u(V)],s.prototype,"changeSelectedRepository",null),c([u(oe)],s.prototype,"changeSelectedCommit",null),c([u(se)],s.prototype,"changeSelectedMerge",null),c([u(gt)],s.prototype,"updateCommitMessage",null),c([u(ne)],s.prototype,"changeVisibleReferences",null),c([u(ft)],s.prototype,"changeBranchesExpanded",null),c([u(st)],s.prototype,"addOrUpdateProfile",null),c([u(it)],s.prototype,"setSelectedProfile",null),c([u(rt)],s.prototype,"deleteProfile",null),c([u(nt)],s.prototype,"deleteCredential",null),c([u(St)],s.prototype,"resetState",null),c([m()],s,"repositoryBookmarks",null),c([m()],s,"repositorySettings",null),c([m()],s,"openRepositoryIds",null),c([m([s,R])],s,"openRepositories",null),c([m([s,R])],s,"openOrLoadingRepositories",null),c([m()],s,"recentRepositories",null),c([m([s,R])],s,"repositoryNames",null),c([m([s,R])],s,"selectedRepository",null),c([m()],s,"selectedRemote",null),c([m([s,R])],s,"selectedRemotes",null),c([m()],s,"selectedRepositoryPath",null),c([m()],s,"selectedCommitId",null),c([m([s,R])],s,"selectedMergeId",null),c([m([s,R])],s,"selectedFile",null),c([m([s,R])],s,"selectedStagedChanges",null),c([m([s,R])],s,"selectedUnstagedChanges",null),c([m([s,R])],s,"selectedMergeHeads",null),c([m([s,R])],s,"selectedRepositoryHeadCommitId",null),c([m([s,R])],s,"selectedRepositoryCommits",null),c([m([s,L])],s,"selectedRepositoryCredentials",null),c([m([s,R])],s,"selectedRepositoryLocalBranches",null),c([m([s,R])],s,"selectedRepositoryRemoteBranches",null),c([m([s,R])],s,"selectedRepositoryTags",null),c([m([s,R])],s,"selectedRepositoryCurrentBranch",null),c([m([s,R])],s,"selectedRepositoryCurrentBranchCommitId",null),c([m([s,R])],s,"selectedRepositoryCurrentBranchUpstreamBranch",null),c([m([s,R])],s,"selectedRepositorySubmodules",null),c([m()],s,"selectedRepositoryCommitMessage",null),c([m()],s,"selectedRepositoryVisibleReferences",null),c([m()],s,"selectedRepositoryExpandedBranches",null),c([m([s,R])],s,"selectedRepositoryLoadingCommitEdit",null),c([m([s,R])],s,"selectedRepositoryPerformingAction",null),c([m([s,R])],s,"selectedRepositoryMostRecentAction",null),c([m([s,R])],s,"selectedRepositoryMostRecentUndoneAction",null),c([m([s,R])],s,"selectedRepositoryStashes",null),s})();xt=K=c([X({name:ce,defaults:wt})],xt);export{Et as a,Ie as b,Nt as c,Pe as d,at as e,dt as f,ke as g,ht as h,mt as i,ut as j,yt as k,V as l,oe as m,Rt as n,se as o,S as p,z as q,Ae as r,re as s,ie as t,gt as u,ne as v,ft as w,St as x,Ct as y,It as z,bt as A,Pt as B,kt as C,Jt as D,$t as E,R as F,xt as G};
