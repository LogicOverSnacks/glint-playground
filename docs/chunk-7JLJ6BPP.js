import{b as W,c as L,d as O,e as de,f as oe}from"./chunk-GBUWXOUI.js";import{a as d}from"./chunk-ODA3O2LV.js";import{C as he,D as re,f as me,j as G,m as e,n as o,r as ae,w as f}from"./chunk-AHHMW4YH.js";import{$c as Z,$d as q,$g as ne,Cd as j,D as u,Ed as Y,Id as b,Jd as N,Kd as y,Md as w,Nd as $,Od as F,S as p,Sc as V,Sg as r,Tc as k,U as z,Ud as M,Ug as te,Uh as T,Vc as U,Vd as x,Yg as ie,Zc as J,_ as H,_c as X,_g as se,ba as S,ig as K,lh as C,m as l,mg as ee,n as Q,q as g,r as n,re as P,s as _,si as ce,v as D}from"./chunk-RKMHOEIU.js";var pe=(()=>{class A{constructor(R){this.store=R}getSigningData(R){let v=null;if(R?.commitSigning)if(typeof R.commitSigning.type=="number"){let E=this.store.selectSnapshot(T.credentials).get(R.commitSigning.type);if(E?.type!=="ssh")throw new r(new P);v={type:"disk",key:E.privateKeyPath,password:E.password}}else v={type:R.commitSigning.type,key:R.commitSigning.key,password:R.commitSigning.password};return v}static{this.\u0275fac=function(v){return new(v||A)(S(K))}}static{this.\u0275prov=H({token:A,factory:A.\u0275fac,providedIn:"root"})}}return A})();var Ge=(()=>{class A{constructor(R,v,E,ue,Be,le,fe){this.dialog=R,this.store=v,this.commitsApi=E,this.historyApi=ue,this.remotesApi=Be,this.repositoriesApi=le,this.signingService=fe,this.fetchFromRemote=(t,i,s=null)=>(s?this.remotesApi.fetch(t,s,i):this.remotesApi.fetchAll(t,i)).pipe(u(c=>$.matches(c)?n(()=>new r(c)):F.matches(c)?n(()=>new r(c)):J.matches(c)?n(()=>new r(c)):n(()=>c)),d(()=>this.store.dispatch(new o(t)))),this.push=(t,i,s,c,m=!1)=>this.store.dispatch(new f(t,{name:m?"Force push":"Push",detail:C("_refs_ to _remote_",{refs:c.join(", "),remote:i}),do:()=>(i?this.remotesApi.push(t,s,i,c,m):this.remotesApi.pushToAllRemotes(t,s,c,m)).pipe(u(h=>$.matches(h)?n(()=>new r(h)):x.matches(h)?n(()=>new r(h)):M.matches(h)?n(()=>new r(h)):F.matches(h)?n(()=>new r(h)):n(()=>h)),d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranchCommitId,e.headCommitId,e.references]))))})),this.pull=(t,i,s,c)=>this.fetchFromRemote(t,s,i).pipe(p(()=>this.commitsApi.getBranchUpstreamCommitId(t,`refs/heads/${c}`)),p(m=>m?this.updateBranch(t,`refs/heads/${c}`,m):n(()=>new r(new V(c))))),this.checkoutBranch=(t,i)=>D([this.repositoriesApi.getCurrentBranch(t),this.historyApi.getHeadCommitId(t)]).pipe(p(([s,c])=>this.dialog.open(L,{data:{title:C("Checkout"),currentBranch:s,currentHeadCommitId:c}}).afterClosed().pipe(p(h=>h?this.store.dispatch(new f(t,{name:"Checkout",detail:i,do:()=>this.repositoriesApi.checkoutBranch(t,i).pipe(u(a=>w.matches(a)?n(()=>new r(a)):n(()=>a)),d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranch,e.currentBranchCommitId,e.currentBranchUpstreamBranch,e.headCommitId,e.references,e.stagedChanges,e.unstagedChanges]))),d(()=>g([s,c]))),undo:([a,B])=>(a?this.repositoriesApi.checkoutBranch(t,a).pipe(u(I=>w.matches(I)?n(()=>new r(I)):n(()=>I))):B?this.repositoriesApi.checkoutCommit(t,B):l).pipe(d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranch,e.currentBranchCommitId,e.currentBranchUpstreamBranch,e.headCommitId,e.references,e.stagedChanges,e.unstagedChanges]))))})):l)))),this.checkoutRemoteBranch=(t,i,s,c,m)=>{let h=(/^refs\/remotes\/([^\/]+)\//.exec(s)??[])[1];if(!h)throw new X(s);let a=s.replace(/^refs\/remotes\/[^\/]+\//,"");if(!a)throw new Z;return c?this.pull(t,h,i,a).pipe(p(()=>this.checkoutBranch(t,c))):m?this.createBranchWithDetails(t,m,a,`${h}/${a}`,!0):l},this.checkoutCommit=(t,i)=>D([this.repositoriesApi.getCurrentBranch(t),this.historyApi.getHeadCommitId(t)]).pipe(p(([s,c])=>this.dialog.open(L,{data:{title:C("Checkout"),currentBranch:s,currentHeadCommitId:c}}).afterClosed().pipe(p(h=>h?this.store.dispatch(new f(t,{name:"Checkout",detail:i,do:()=>this.repositoriesApi.checkoutCommit(t,i).pipe(u(a=>w.matches(a)?n(()=>new r(a)):n(()=>a)),d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranch,e.currentBranchCommitId,e.currentBranchUpstreamBranch,e.headCommitId,e.references,e.stagedChanges,e.unstagedChanges]))),d(()=>g([s,c]))),undo:([a,B])=>(a?this.repositoriesApi.checkoutBranch(t,a).pipe(u(I=>w.matches(I)?n(()=>new r(I)):n(()=>I))):B?this.repositoriesApi.checkoutCommit(t,B):l).pipe(d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranch,e.currentBranchCommitId,e.currentBranchUpstreamBranch,e.headCommitId,e.references,e.stagedChanges,e.unstagedChanges]))))})):l)))),this.createBranch=(t,i,s=!0)=>this.dialog.open(O,{data:{title:C("Branch")}}).afterClosed().pipe(p(m=>m?this.store.dispatch(new f(t,{name:"Create branch",detail:C("_name_ at _commit_",{name:m.name,commitId:i,upstreamName:null}),do:()=>D([this.repositoriesApi.getCurrentBranch(t),this.historyApi.getHeadCommitId(t)]).pipe(z(([h,a])=>{!h&&a&&(s=!1)}),p(h=>this.repositoriesApi.createBranch(t,i,m.name).pipe(u(a=>j.matches(a)?n(()=>new r(a)):n(()=>a)),p(()=>s?this.repositoriesApi.checkoutBranch(t,m.name):l),u(a=>w.matches(a)?l:k.matches(a)?n(()=>new r(a)):U.matches(a)?n(()=>new r(a)):n(()=>a)),d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranch,e.currentBranchCommitId,e.currentBranchUpstreamBranch,e.headCommitId,e.references,e.stagedChanges,e.unstagedChanges]))),d(()=>g(h))))),undo:([h,a])=>(s?h?this.repositoriesApi.checkoutBranch(t,h):a?this.repositoriesApi.checkoutCommit(t,a):g(void 0):g(void 0)).pipe(u(B=>w.matches(B)?l:k.matches(B)?n(()=>new r(B)):U.matches(B)?n(()=>new r(B)):n(()=>B)),p(()=>this.repositoriesApi.deleteBranch(t,m.name)),d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranch,e.currentBranchCommitId,e.currentBranchUpstreamBranch,e.headCommitId,e.references,e.stagedChanges,e.unstagedChanges]))))})):l)),this.createBranchWithDetails=(t,i,s,c=null,m=!0)=>this.store.dispatch(new f(t,{name:"Create branch",detail:C("_name_ at _commit_",{name:s,commitId:i,upstreamName:c}),do:()=>D([this.repositoriesApi.getCurrentBranch(t),this.historyApi.getHeadCommitId(t)]).pipe(z(([h,a])=>{!h&&a&&(m=!1)}),p(h=>this.repositoriesApi.createBranch(t,i,s).pipe(u(a=>j.matches(a)?n(()=>new r(a)):n(()=>a)),p(()=>m?this.repositoriesApi.checkoutBranch(t,s):l),u(a=>w.matches(a)?l:n(()=>a)),p(()=>c?this.repositoriesApi.setUpstreamBranch(t,s,c):l),u(a=>k.matches(a)?n(()=>new r(a)):U.matches(a)?n(()=>new r(a)):n(()=>a)),d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranch,e.currentBranchCommitId,e.currentBranchUpstreamBranch,e.headCommitId,e.references,e.stagedChanges,e.unstagedChanges]))),d(()=>g(h))))),undo:([h,a])=>(m?h?this.repositoriesApi.checkoutBranch(t,h):a?this.repositoriesApi.checkoutCommit(t,a):g(void 0):g(void 0)).pipe(u(B=>w.matches(B)?l:k.matches(B)?n(()=>new r(B)):U.matches(B)?n(()=>new r(B)):n(()=>B)),p(()=>this.repositoriesApi.deleteBranch(t,s)),d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranch,e.currentBranchCommitId,e.currentBranchUpstreamBranch,e.headCommitId,e.references,e.stagedChanges,e.unstagedChanges]))))})),this.createTag=(t,i,s="")=>this.dialog.open(O,{data:{title:C("Tag")}}).afterClosed().pipe(p(m=>m?this.store.dispatch(new f(t,{name:"Create tag",detail:C("_name_ at _commit_",{name:m.name,commitId:i,upstreamName:null}),do:()=>this.repositoriesApi.createTag(t,i,m.name,s).pipe(u(h=>U.matches(h)?n(()=>new r(h)):n(()=>h)),d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranch,e.currentBranchCommitId,e.currentBranchUpstreamBranch,e.references])))),undo:()=>this.repositoriesApi.deleteTag(t,m.name).pipe(d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranch,e.currentBranchCommitId,e.currentBranchUpstreamBranch,e.references]))))})):l)),this.renameBranch=(t,i)=>this.dialog.open(oe,{data:{title:C("Branch"),name:i}}).afterClosed().pipe(p(c=>c?this.store.dispatch(new f(t,{name:"Rename branch",detail:C("!rename! _name_ to _name_",{from:i,to:c}),do:()=>this.repositoriesApi.renameBranch(t,i,`refs/heads/${c}`).pipe(u(m=>k.matches(m)?n(()=>new r(m)):U.matches(m)?n(()=>new r(m)):n(()=>m)),d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranch,e.currentBranchCommitId,e.currentBranchUpstreamBranch,e.references])))),undo:()=>this.repositoriesApi.renameBranch(t,c,`refs/heads/${i}`).pipe(u(m=>k.matches(m)?n(()=>new r(m)):U.matches(m)?n(()=>new r(m)):n(()=>m)),d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranch,e.currentBranchCommitId,e.currentBranchUpstreamBranch,e.references]))))})):l)),this.deleteBranch=(t,i)=>this.dialog.open(W,{data:{title:C("Delete Branch"),branchName:i,toCommitId:null}}).afterClosed().pipe(p(c=>c?this.store.dispatch(new f(t,{name:"Delete branch",detail:i,do:()=>this.commitsApi.getBranchCommitId(t,i).pipe(p(m=>this.repositoriesApi.deleteBranch(t,i).pipe(d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranch,e.currentBranchCommitId,e.currentBranchUpstreamBranch,e.references]))),d(()=>g(m))))),undo:m=>this.repositoriesApi.createBranch(t,m,i).pipe(u(h=>j.matches(h)?n(()=>new r(h)):k.matches(h)?n(()=>new r(h)):U.matches(h)?n(()=>new r(h)):n(()=>h)),d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranch,e.currentBranchCommitId,e.currentBranchUpstreamBranch,e.references]))))})):l)),this.deleteRemoteBranch=(t,i,s,c)=>this.dialog.open(W,{data:{title:C("Delete Remote Branch"),branchName:`refs/remotes/${s}/${c}`,toCommitId:null}}).afterClosed().pipe(p(h=>h?this.store.dispatch(new f(t,{name:"Delete remote branch",detail:`${s}/${c}`,do:()=>this.commitsApi.getBranchCommitId(t,`refs/remotes/${s}/${c}`).pipe(p(a=>this.repositoriesApi.deleteRemoteBranch(t,i,s,c).pipe(p(()=>this.remotesApi.fetch(t,s,i)),u(B=>[$,x,M,F,U,J].some(({matches:I})=>I(B))?n(()=>new r(B)):n(()=>B)),d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranchUpstreamBranch,e.references]))),d(()=>g(a))))),undo:a=>this.repositoriesApi.forceUpdateRemoteBranch(t,i,s,c,a).pipe(p(()=>this.remotesApi.fetch(t,s,i)),u(B=>[$,x,M,F].some(({matches:I})=>I(B))?n(()=>new r(B)):n(()=>B)),d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranchUpstreamBranch,e.references]))))})):l)),this.deleteTag=(t,i)=>this.store.dispatch(new f(t,{name:"Delete tag",detail:i,do:()=>this.commitsApi.getTagCommitId(t,i).pipe(p(s=>this.repositoriesApi.deleteTag(t,i).pipe(d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranch,e.currentBranchCommitId,e.currentBranchUpstreamBranch,e.references]))),d(()=>g(s))))),undo:s=>this.repositoriesApi.createTag(t,s,i,"").pipe(u(c=>U.matches(c)?n(()=>new r(c)):n(()=>c)),d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranch,e.currentBranchCommitId,e.currentBranchUpstreamBranch,e.references]))))})),this.updateBranch=(t,i,s)=>this.dialog.open(W,{data:{title:C("Move Branch"),branchName:i,toCommitId:s}}).afterClosed().pipe(p(m=>m?this.store.dispatch(new f(t,{name:"Move branch",detail:C("!move! _name_ to _name_",{from:i,to:s}),do:()=>this.commitsApi.getBranchCommitId(t,i).pipe(p(h=>this.repositoriesApi.updateBranch(t,i,s).pipe(u(a=>w.matches(a)?n(()=>new r(a)):n(()=>a)),d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranch,e.currentBranchCommitId,e.currentBranchUpstreamBranch,e.headCommitId,e.references]))),_(()=>h)))),undo:h=>this.repositoriesApi.updateBranch(t,i,h).pipe(u(a=>w.matches(a)?n(()=>new r(a)):n(()=>a)),d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranch,e.currentBranchCommitId,e.currentBranchUpstreamBranch,e.headCommitId,e.references]))))})):l)),this.setUpstreamBranch=(t,i,s)=>this.store.dispatch(new f(t,{name:`${s?"Change":"Remove"} upstream branch`,detail:s?`${i} -> ${s}`:i,do:()=>this.repositoriesApi.getUpstreamBranch(t,i).pipe(p(c=>this.repositoriesApi.setUpstreamBranch(t,i,s).pipe(d(()=>this.store.dispatch(new o(t,[e.currentBranchUpstreamBranch,e.references]))),d(()=>g(c))))),undo:c=>this.repositoriesApi.setUpstreamBranch(t,i,c?.replace(/^refs\/remotes\//,"")??null).pipe(d(()=>this.store.dispatch(new o(t,[e.currentBranchUpstreamBranch,e.references]))))})),this.createCommit=(t,i,s)=>this.store.dispatch(new f(t,{name:"Create commit",detail:s,do:()=>{let c=this.signingService.getSigningData(i);return this.commitsApi.putCommit(t,i.name,i.email,s,c).pipe(u(m=>b.matches(m)?n(()=>new r(m)):Y.matches(m)?n(()=>new r(m)):n(()=>m)),d(m=>this.store.dispatch([...m?[new ae(t,null),new G(t,m)]:[],new o(t,[e.commits,e.currentBranch,e.currentBranchCommitId,e.headCommitId,e.references,e.stagedChanges,e.submodules])]).pipe(_(()=>m))))},undo:()=>this.commitsApi.undoHeadCommit(t).pipe(u(c=>q.matches(c)?n(()=>new r(c)):n(()=>c)),d(c=>this.store.dispatch(new o(t,[e.commits,e.currentBranchCommitId,e.headCommitId,e.references,e.stagedChanges,e.submodules]))))})).pipe(_(()=>this.store.selectSnapshot(he.mostRecentActionState(t)))),this.revertCommit=(t,i)=>{let s=this.store.selectSnapshot(T.selectedProfile);return this.store.dispatch(new f(t,{name:"Revert commit",detail:i,do:()=>D([this.historyApi.getHeadCommitId(t),this.repositoriesApi.getCurrentBranch(t)]).pipe(p(c=>this.commitsApi.revertCommit(t,i,s?.name??null,s?.email??null,this.signingService.getSigningData(s)).pipe(p(m=>this.store.dispatch(new G(t,m))),u(m=>N.matches(m)?n(()=>new r(m)):y.matches(m)?n(()=>new r(m)):Y.matches(m)?n(()=>new r(m)):n(()=>m)),d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranchCommitId,e.headCommitId,e.references]))),d(()=>g(c))))),undo:([c,m])=>c?this.repositoriesApi.updateBranch(t,m??"HEAD",c).pipe(u(h=>w.matches(h)?n(()=>new r(h)):n(()=>h)),d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranch,e.currentBranchCommitId,e.headCommitId,e.references])))):g(void 0)}))},this.undoHeadCommit=t=>this.store.dispatch(new f(t,{name:"Undo commit",detail:C("HEAD"),do:()=>this.historyApi.getHeadCommitId(t).pipe(p(i=>this.commitsApi.undoHeadCommit(t).pipe(u(s=>q.matches(s)?n(()=>new r(s)):n(()=>s)),d(s=>this.store.dispatch(new o(t,[e.commits,e.currentBranchCommitId,e.headCommitId,e.references,e.stagedChanges,e.submodules])).pipe(_(()=>[i,s??[]])))))),undo:([i,s])=>i?D(s.map(c=>this.repositoriesApi.updateBranch(t,c,i))).pipe(u(c=>w.matches(c)?n(()=>new r(c)):n(()=>c)),d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranch,e.currentBranchCommitId,e.headCommitId,e.references,e.stagedChanges,e.submodules])))):g(void 0)})),this.addRemote=(t,i,s)=>this.store.dispatch(new f(t,{name:"Add remote",detail:`${i} -> ${s}`,do:()=>this.remotesApi.addRemote(t,i,s).pipe(d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranchUpstreamBranch,e.merges,e.references,e.remotes]))))})),this.deleteRemote=(t,i)=>this.dialog.open(de,{data:{name:i}}).afterClosed().pipe(p(s=>s?this.store.dispatch(new f(t,{name:"Delete remote",detail:i,do:()=>this.remotesApi.deleteRemote(t,i).pipe(p(()=>this.store.selectSnapshot(re.selectedRemote)===i?this.store.dispatch(new me(t,null)):l),d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranchUpstreamBranch,e.merges,e.references,e.remotes]))))})):l)),this.updateRemoteUrl=(t,i,s)=>this.store.dispatch(new f(t,{name:"Update remote url",detail:`${i} -> ${s}`,do:()=>this.remotesApi.updateRemoteUrl(t,i,s).pipe(d(()=>this.store.dispatch(new o(t,[e.commits,e.currentBranchUpstreamBranch,e.merges,e.references,e.remotes]))))}))}static{this.\u0275fac=function(v){return new(v||A)(S(ce),S(K),S(te),S(ie),S(se),S(ne),S(pe))}}static{this.\u0275prov=H({token:A,factory:A.\u0275fac,providedIn:"root"})}}return Q([ee(T.selectedProfile)],A.prototype,"selectedProfile",void 0),A})();export{pe as a,Ge as b};
